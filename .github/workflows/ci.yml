name: Corona PCAP Processor CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup uv
      uses: astral-sh/setup-uv@v1

    - name: Install system dependencies
      run: |
        sudo apt install libpcap-dev

    - name: Install Python dependencies with uv
      run: |
        uv venv
        uv sync --dev
        
    - name: Cache test data
      uses: actions/cache@v3
      with:
        path: |
          sample-pcap.pcap
          sample-whois-iam.pcap
          SampleWhoisIamForwardedBroadcast.pcap
        key: ${{ runner.os }}-test-data-${{ hashFiles('sample-pcap.pcap', 'sample-whois-iam.pcap', 'SampleWhoisIamForwardedBroadcast.pcap') }}
        restore-keys: |
          ${{ runner.os }}-test-data-

    - name: Lint with ruff
      run: |
        # stop the build if there are Python syntax errors or undefined names
        uv run ruff check . --select=E9,F63,F7,F82 --target-version=py310
        # run ruff in lint-only mode
        uv run ruff check . --target-version=py310 --exit-zero
        
    - name: Type check with mypy
      run: |
        uv run mypy --install-types --non-interactive .
      continue-on-error: true  # Allow mypy to fail for now (can be removed later)
        
    - name: Test with pytest
      run: |
        uv run pytest tests/ --cov=src/bacnet_analyzer --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  validate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Setup uv
      uses: astral-sh/setup-uv@v1
        
    - name: Install dependencies with uv
      run: |
        uv venv
        uv sync --dev
        
    - name: Clone Corona Standard Repository
      uses: actions/checkout@v4
      with:
        repository: ACE-IoT-Solutions/corona-framework
        path: corona-standard
        
    - name: Generate sample metrics
      run: |
        uv run python generate_corona_metrics.py sample-pcap.pcap sample-metrics.ttl
        
    - name: Validate metrics against Corona standard
      run: |
        cd corona-standard
        # Assuming corona-standard also uses uv and has its dependencies defined
        # If not, this step might need adjustment to install its dependencies
        uv run python validate_model.py ../sample-metrics.ttl --analyze